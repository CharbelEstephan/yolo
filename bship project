package p1; 
import java.util.Scanner;
import java.util.Arrays;
public class BattleShipBoard {
	private String[][] bShipBoard;
	private int hits;
	private int misses;
	private int redundantStrikes;
	private boolean debug = false;
	private int row;
	private int col;
	private int ships;
	private int mines;
	
	public int getMines(){
		return this.mines;
	}
	public void setMines(int mines){
		this.mines = mines;
	}
	
	public int getShips(){
		return this.ships;
	}
	public void setShips(int ships){
		this.ships = ships;
	}
	private int getRow(){
		return this.row;
	}
	private int getCol(){
		return this.col;
	}
	
	public void setHits(int hits){
		this.hits = hits;
	}
	public int getHits(){
		return this.hits;
	}
	public void setMisses(int misses){
		this.misses = misses;
	}
	public int getMisses(){
		return this.misses;
	}
	public void setRedundantStrikes(int redundantStrikes){
		this.redundantStrikes = redundantStrikes;
	}
	public int getRedundantStrikes(){
		return this.redundantStrikes;
		
	}
	
	public void setBShipBoard(int row, int col, String info){
		this.bShipBoard[row][col] = info;
	}
	public BattleShipBoard(int row, int col){
		this.bShipBoard = new String[row][col];
		int midY = (int)Math.floor(Math.random() * row);
		int midX = (int)Math.floor(Math.random() * col);
		if(row*col<16){
			ships = 1;
			mines = 1;
		}
		else if(row*col < 36){
			ships = 2;
			mines = 2;
		}
		else if(row*col <=100){
			ships = 3;
			mines = 3;
		}
		setSpin(midY , midX);
		System.out.println(Arrays.deepToString(bShipBoard));
	}
	public void enableDebug(){
		this.debug = true;
		System.out.println("Test/Debug mode enabled");
	}
	
	public static void main(String[] args){
		int ships = 0;
		int mines = 0;
		int turns = 0;
		boolean gameover = false;
		boolean validBoardSize = false;
		System.out.println("Welcome to battleship!");
		Scanner s = new Scanner(System.in);
		System.out.println("Please enter the size of the board in whole numbers.  Press enter after the first number is entered");
		int row = s.nextInt();
		int col = s.nextInt();
		while(validBoardSize == false){
			if(row*col < 9){
				System.out.println("Invalid board size, board too small");
				System.out.println("Please re-enter the board size");
				row = s.nextInt();
				col = s.nextInt();
			}
			else if(row*col > 100){
				System.out.println("Invalid board size, board too large");
				System.out.println("Please re-enter the board size");
				row = s.nextInt();
				col = s.nextInt();
			}
			else{
				BattleShipBoard board = new BattleShipBoard(row, col);
				validBoardSize = true;
			}
		}
		System.out.println("Test/Debug mode? T/F");
		String test = s.next();
		if(test.equalsIgnoreCase("T")){
			//board.enableDebug();
		}
		else if(test.equalsIgnoreCase("F")){
			System.out.println("Let the game begin!");
		}
		else{
			System.out.println("Invalid answer");
		}
		
		// need to tell the user what the top left and bottom right corner coordinates are
		
		while (gameover == false){ // starting the turn loop
			turns++;
			
		
			}
		
	}
	public boolean placeVertical(int midY , int midX){
		if (midY == 0){
			midY += 1;
		}
		else if(midY == this.bShipBoard.length-1){
			midY -= 1;
		}
		if (checkAround(midY,midX)){
			if(checkAround (midY+1,midX)){
				if (checkAround (midY-1,midX)){
					this.bShipBoard[midY][midX] = "s";
					this.bShipBoard[midY+1][midX] = "s";
					this.bShipBoard[midY-1][midX] = "s";
					return true;
				}
			}
		}
		return false;
	}
	public boolean placeHorizontal(int midY , int midX){
		if (midX == 0){
			midX += 1;
		}
		else if(midX == this.bShipBoard[0].length-1){
			midX -= 1;
		}
		if (checkAround(midY,midX)){
			if(checkAround (midY,midX+1)){
				if (checkAround (midY,midX-1)){
					this.bShipBoard[midY][midX] = "s";
					this.bShipBoard[midY][midX+1] = "s";
					this.bShipBoard[midY][midX-1] = "s";
					return true;
				}
			}
		}
		return false;
	}
	public boolean checkAround(int x, int y){
		if (this.bShipBoard[x][y] == null){
			return true;
		}
		else{
			return false;
		}
	}
	public void setSpin(int midY, int midX){
		double num = Math.random();
		int placedShips = 0;
		while(placedShips < ships){
			if (num >= .5){
				if (placeHorizontal(midY , midX) == true){
				placedShips += 1;
				}
		}
			else{
				if (placeVertical(midY, midX) == true){
					placedShips += 1;
			}	
		}
			midY = (int)Math.floor(Math.random() * row);
			midX = (int)Math.floor(Math.random() * col);
	}
	}
}
	
